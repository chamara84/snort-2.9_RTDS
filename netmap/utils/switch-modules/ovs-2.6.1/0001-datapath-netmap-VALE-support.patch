diff --git a/INSTALL.NETMAP b/INSTALL.NETMAP
new file mode 100644
index 000000000..7cf02e45e
--- /dev/null
+++ b/INSTALL.NETMAP
@@ -0,0 +1,99 @@
+                   Using Open vSwitch with netmap (VALE)
+                   ============================
+
+Open vSwitch can use VALE, a software switch that runs in a kernel
+to accelerate its datapath.
+Thanks to efficient packet I/O based on netmap API and a novel
+packet forwarding algorithm, VALE accelerates Open vSwitch datapath
+by three times when forwarding short packets between 10 Gbps NICs.
+This file explains how to install and use the Open vSwitch with VALE.
+
+The VALE support for Open vSwitch is **experimental**: it has not
+been throughly tested.
+It currently supports only netdev (including internal one) and VXLAN
+vport types.
+
+HOW TO BUILD CODE
+-----------------
+This patch applies to Open vSwitch 2.6.1.
+
+We assume that an up-to-date version of netmap
+(https://github.com/luigirizzo/netmap) is already installed.
+
+Installation steps are same with one written in a file INSTALL,
+except for specifying a path to netmap source in configure process:
+
+* `./configure --with-netmap=/path/to/netmap/repo`
+
+This is necessary because the VALE-accelerated version of
+Open vswitch datapath (kernel module) leverages utility functions
+provided by netmap (defined in sys/dev/netmap/netmap_kern.h,
+sys/net/netmap.h etc.), and refers to symbols exported from a
+netmap kernel module (LINUX/Module.symvers).
+
+Before being able to build OVS, therefore, you need to build netmap.
+When building netmap, run ./configure and make in the root directory of
+the netmap repository; don't run those in the LINUX/ subdir or into
+another build directory, otherwise the openvswitch module will not be
+built with the correct dependencies in place.
+
+To quickly build and run, ovs-dev.py script can also be used:
+
+* `python utilities/ovs-dev.py env && python utilities/ovs-dev.py conf \
+	--with-netmap=/path/to/netmap/repo make`
+
+See ovs-dev.py itself for detailed information.
+
+
+HOW TO TRY THE PATCHED OVS
+--------------------------
+
+(1) Load netmap openvswitch kernel modules (assuming you have installed netmap
+and openvswitch system-wide)
+
+# modprobe netmap
+# modprobe openvswitch
+
+(2) Run the openvswitch deamon. This step may be performed differently on
+different distributions. Refer to the OVS documentation.
+
+(3) Create an OVS bridge:
+
+# ovs-vsctl add-br br0
+
+(4) Create two persistent VALE ports:
+
+# vale-ctl -n vi0
+# vale-ctl -n vi1
+
+(5) Attach the two ports to the bridge:
+
+# ovs-vsctl add-port br0 vi0
+# ovs-vsctl add-port br0 vi1
+
+(6) Add some OpenFlow rules, to forward traffic betweeen vi0 and vi1
+(assuming the port identifiers are 1 and 2):
+
+# ovs-ofctl add-flow br0 in_port=1,actions=output:2
+# ovs-ofctl add-flow br0 in_port=2,actions=output:1
+
+(7) Bring the various interfaces up:
+
+# ip link set vi0 up
+# ip link set vi1 up
+# ip link set br0 up
+
+(8) Run pkt-gen in receive mode on vi0:
+
+# pkt-gen -i vi0 -f rx
+
+(9) On a different terminal, run pkt-gen in transmit mode on vi1:
+
+# pkt-gen -i vi1 -f tx
+
+(10) You should see traffic received by the receiving pkt-gen.
+You can also attach other interfaces to the switches, provided
+they have netmap support (e.g. Intel NIC veth interfaces,
+etc.):
+
+# ovs-vsctl add-port br0 eth2
diff --git a/Makefile.am b/Makefile.am
index 49010b3b5..56f4f62ef 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -85,6 +85,7 @@ docs = \
 	INSTALL.XenServer.md \
 	INSTALL.userspace.md \
 	INSTALL.Windows.md \
+	INSTALL.NETMAP \
 	IntegrationGuide.md \
 	MAINTAINERS.md \
 	OPENFLOW-1.1+.md \
diff --git a/acinclude.m4 b/acinclude.m4
index 2c500a8d1..9a792be56 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -155,6 +155,24 @@ AC_DEFUN([OVS_CHECK_LINUX], [
   AM_CONDITIONAL(LINUX_ENABLED, test -n "$KBUILD")
 ])
 
+dnl OVS_CHECK_NETMAP
+dnl
+dnl Configure NETMAP source tree
+AC_DEFUN([OVS_CHECK_NETMAP], [
+  AC_ARG_WITH([netmap],
+              [AC_HELP_STRING([--with-netmap=/path/to/netmap],
+                              [Specify the netmap build directory])])
+  if test X"$with_netmap" != X; then
+    NETMAP_DIR=$with_netmap
+    AC_DEFINE([DEV_NETMAP], [1], [System uses the netmap module.])
+  else
+    NETMAP_DIR=
+  fi
+  AC_SUBST([NETMAP_DIR])
+
+  AM_CONDITIONAL([DEV_NETMAP], test -n "$NETMAP_DIR")
+])
+
 dnl OVS_CHECK_DPDK
 dnl
 dnl Configure DPDK source tree
diff --git a/configure.ac b/configure.ac
index da3bbaeb4..6d6a1fdd1 100644
--- a/configure.ac
+++ b/configure.ac
@@ -168,6 +168,7 @@ AC_ARG_VAR(KARCH, [Kernel Architecture String])
 AC_SUBST(KARCH)
 OVS_CHECK_LINUX
 OVS_CHECK_DPDK
+OVS_CHECK_NETMAP
 OVS_CHECK_PRAGMA_MESSAGE
 AC_SUBST([OVS_CFLAGS])
 AC_SUBST([OVS_LDFLAGS])
diff --git a/datapath/Modules.mk b/datapath/Modules.mk
index 8e9a1697a..bc8b651f1 100644
--- a/datapath/Modules.mk
+++ b/datapath/Modules.mk
@@ -26,7 +26,8 @@ openvswitch_sources = \
 	flow_table.c \
 	vport.c \
 	vport-internal_dev.c \
-	vport-netdev.c
+	vport-netdev.c \
+	dp-vale.c
 
 vport_geneve_sources = vport-geneve.c
 vport_vxlan_sources = vport-vxlan.c
@@ -43,7 +44,9 @@ openvswitch_headers = \
 	flow_table.h \
 	vport.h \
 	vport-internal_dev.h \
-	vport-netdev.h
+	vport-netdev.h \
+	dp-vale.h \
+	vport-internal_dev_netmap.h
 
 openvswitch_extras = \
 	README.md
diff --git a/datapath/datapath.c b/datapath/datapath.c
index db8a18a13..0352e3d83 100644
--- a/datapath/datapath.c
+++ b/datapath/datapath.c
@@ -2378,7 +2378,11 @@ static int __init dp_init(void)
 
 	BUILD_BUG_ON(sizeof(struct ovs_skb_cb) > FIELD_SIZEOF(struct sk_buff, cb));
 
-	pr_info("Open vSwitch switching datapath %s\n", VERSION);
+	pr_info("Open vSwitch switching datapath %s"
+#ifdef DEV_NETMAP
+		" [patched for NETMAP]"
+#endif
+		"\n", VERSION);
 
 	err = compat_init();
 	if (err)
diff --git a/datapath/dp-vale.c b/datapath/dp-vale.c
new file mode 100644
index 000000000..fb1ac5f6c
--- /dev/null
+++ b/datapath/dp-vale.c
@@ -0,0 +1,197 @@
+/*
+ * Copyright (c) 2014 NEC Europe Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of version 2 of the GNU General Public
+ * License as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA
+ */
+
+#ifdef DEV_NETMAP
+#include "dp-vale.h"
+
+/*
+ * We cannot simply register OVS datapath to the VALE switch
+ * at datapath initialization, because it requires at least
+ * one port. We thus do this when the first port is attached.
+ */
+static int vale_dp_initialized = 0;
+
+/**
+ * Equivalent of netdev_frame_hook().
+ * XXX skb is always private, so we use _skb_refdst to store the destination
+ */
+static unsigned int ovs_vale_lookup(struct nm_bdg_fwd *ft, u8 *dst_ring,
+		struct netmap_vp_adapter *na)
+{
+	struct net_device *dev;
+	struct vport *vport;
+	struct sk_buff *skb;
+	struct sk_buff sskb;
+	struct ovs_vale_dst dst = {1, NM_BDG_NOPORT};
+	u_int shlen = SKB_DATA_ALIGN( sizeof(struct skb_shared_info) -
+		sizeof(skb_frag_t) * MAX_SKB_FRAGS ); /* XXX no multi frags */
+	u_int buf_len = ft->ft_len;
+	uint8_t *buf = ft->ft_buf;
+
+	dev = netmap_vp_to_ifp(na);
+	if (buf_len == na->up.virt_hdr_len) {
+		ft++;
+		buf = ft->ft_buf;
+		buf_len = ft->ft_len;
+	} else {
+		buf += na->up.virt_hdr_len;
+		buf_len -= na->up.virt_hdr_len;
+	}
+	if (ovs_is_internal_dev(dev))
+		vport = ovs_internal_dev_get_vport(dev);
+	else
+		vport = ovs_netdev_get_vport(dev);
+	if (unlikely(!vport))
+		return NM_BDG_NOPORT;
+
+	/* We use the last bytes of buf for skb_shared_info with no
+	 * frags.
+	 * So, make sure that there is no other fragments and GSO
+	 * processing is not applied.
+	 */
+	bzero(&sskb, sizeof(sskb));
+	sskb.dev = dev;
+	sskb.len += buf_len;
+	sskb.truesize = NETMAP_BUF_SIZE(&na->up) - shlen;
+	sskb.head_frag = 1;
+	sskb.data = sskb.head = (unsigned char *)buf;
+	skb_reset_tail_pointer(&sskb);
+	/* Ensure sskb.end points shinfo */
+	sskb.end = sskb.tail + NETMAP_BUF_SIZE(&na->up) - shlen;
+	sskb.mac_header = (typeof(sskb.mac_header))~0U;
+	sskb.transport_header = (typeof(skb->transport_header))~0U;
+
+	sskb.protocol = eth_type_trans(&sskb, dev);
+	atomic_set(&sskb.users, 2); /* not to be real-freed */
+
+	bzero(skb_shinfo(&sskb), shlen);
+	atomic_set(&skb_shinfo(&sskb)->dataref, 1);
+	skb = &sskb;
+
+	OVCB_SET(skb, &dst);
+
+	skb_push(skb, ETH_HLEN);
+	skb_postpush_rcsum(skb, skb->data, ETH_HLEN);
+	rcu_read_lock();
+	ovs_vport_receive(vport, skb, NULL /* no tunnel key */);
+	rcu_read_unlock();
+	OVCB_SET(skb, NULL);
+	*dst_ring = 0;
+	return dst.port;
+}
+
+/* Name of the VALE switch that will be actually used to
+ * implement the OVS datapath (for all the OVS bridges). */
+#define OVS_VALE_PREFIX "valeOVS:"
+
+static struct netmap_bdg_ops ovs_vale_ops = {
+	.lookup = ovs_vale_lookup,
+	.config = NULL,
+	.dtor = NULL,
+};
+
+
+/*
+ * we pass indication of an internal device as argument because
+ * is_internal_dev() does not work until the datapath is fully
+ * initialized
+ */
+int ovs_vale_ctl(const char *name, int internal, int onoff)
+{
+	struct nmreq nmr;
+	int error;
+
+	memset(&nmr, 0, sizeof(nmr));
+
+	/* create request string */
+	strncpy(nmr.nr_name, OVS_VALE_PREFIX, sizeof(nmr.nr_name));
+	if (strlen(nmr.nr_name) + strlen(name) + 1 >= IFNAMSIZ)
+		return EINVAL;
+	strcat(nmr.nr_name, name);
+
+	nmr.nr_cmd = onoff ? NETMAP_BDG_ATTACH : NETMAP_BDG_DETACH;
+	if (onoff && internal)
+		nmr.nr_arg1 = NETMAP_BDG_HOST;
+	error = netmap_bdg_ctl(&nmr, NULL);
+	D("netmap_bdg_ctl(%s, NETMAP_BDG_%s, %s) --> %d", nmr.nr_name,
+		onoff ? "ATTACH" : "DETACH",
+		internal ? "NETMAP_BDG_HOST" : "0", error);
+	if (error) {
+		return error;
+	}
+
+	if (onoff && !vale_dp_initialized) {
+		/* reuse nr_name */
+		nmr.nr_cmd = NETMAP_BDG_REGOPS;
+		error = netmap_bdg_ctl(&nmr, &ovs_vale_ops);
+		if (error) {
+			nmr.nr_cmd = NETMAP_BDG_DETACH;
+			if (netmap_bdg_ctl(&nmr, NULL)) /* XXX handle error... */
+				D("error on BDG_DETACH after BDG_REGOPS failure");
+		} else {
+			vale_dp_initialized = 1;
+			D("datapath registered to %s", OVS_VALE_PREFIX);
+		}
+
+	} else if (!onoff && vale_dp_initialized) { /* last interface? */
+		nmr.nr_cmd = NETMAP_BDG_LIST;
+		memset(nmr.nr_name, 0, sizeof(nmr.nr_name));
+		strncpy(nmr.nr_name, OVS_VALE_PREFIX, sizeof(nmr.nr_name));
+		if (netmap_bdg_ctl(&nmr, NULL) == ENOENT) {
+			vale_dp_initialized = 0;
+			D("%s destroyed", OVS_VALE_PREFIX);
+		}
+	}
+	return error;
+}
+
+int ovs_vale_send(struct net_device *dev, struct sk_buff *skb)
+{
+	struct ovs_vale_dst *dst = OVCB(skb)->dst;
+	struct netmap_vp_adapter *vpna;
+	u_int dport;
+
+	if (!skb_owned_by_vale(skb))
+		return 0;
+	if (netmap_ifp_to_vp(dev) == NULL) { /* Not a VALE port */
+		dst->port = NM_BDG_NOPORT;
+		goto consumed;
+	}
+	/* set the destination index of the bridge.
+	 * XXX If it is already set, we broadcast this packet
+	 */
+	vpna = ovs_is_internal_dev(dev) ? netmap_ifp_to_host_vp(dev) :
+		netmap_ifp_to_vp(dev);
+	if (unlikely(!vpna)) {
+		D("%s is not attached to the bridge", dev->name);
+		return 0;
+	}
+	dport = vpna->bdg_port;
+	if (dst->port == NM_BDG_NOPORT)
+		dst->port = dport;
+	else if (likely(dst->port != dport))
+		dst->port = NM_BDG_BROADCAST;
+	/* destroyed if this is cloned in action's loop, otherwise
+	 * drops the extra refcount
+	 */
+consumed:
+	//kfree_skb(skb);
+	return 1;
+}
+EXPORT_SYMBOL_GPL(ovs_vale_send);
+#endif /* DEV_NETMAP */
diff --git a/datapath/dp-vale.h b/datapath/dp-vale.h
new file mode 100644
index 000000000..faaeb9b6a
--- /dev/null
+++ b/datapath/dp-vale.h
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2014 NEC Europe Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of version 2 of the GNU General Public
+ * License as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA
+ */
+
+#include "datapath.h"
+#include "vport-netdev.h"
+#include "vport-internal_dev.h"
+#include <bsd_glue.h>
+#include <net/netmap.h>
+#include <netmap/netmap_kern.h>
+
+struct ovs_vale_dst {
+	unsigned char active;
+	unsigned char port;
+};
+struct ovs_vale_cb {
+	struct ovs_vale_dst *dst;
+};
+#define OVCB(skb)	((struct ovs_vale_cb *)(((skb)->cb + sizeof(struct ovs_skb_cb))))
+#define OVCB_SET(skb, p)	OVCB((skb))->dst = (p)
+
+static inline int skb_owned_by_vale(const struct sk_buff *skb)
+{
+	return OVCB(skb)->dst && OVCB(skb)->dst->active;
+}
+
+static inline struct sk_buff *convert_to_real(struct sk_buff *fake)
+{
+	struct sk_buff *skb = skb_copy(fake, GFP_ATOMIC);
+
+	return skb;
+}
+
+/* This is stupid as this should be done using ovs_dp_name().
+ * However, it only works after completion of initiation of the datapath...
+ */
+/*
+static inline const char *ovs_vale_prefix(const struct vport *vport)
+{
+	if (vport->port_no == OVSP_LOCAL)
+		return vport->ops->get_name(vport);
+	else
+		return ovs_dp_name(vport->dp);
+}
+*/
+
+static inline int vale_prefix(const char *name)
+{
+	return !strncmp(NM_BDG_NAME, name, strlen(NM_BDG_NAME));
+}
+
+int ovs_vale_ctl(const char *, int, int);
+int ovs_vale_send(struct net_device *, struct sk_buff *skb);
diff --git a/datapath/linux/Kbuild.in b/datapath/linux/Kbuild.in
index 9e3259f19..a88c33ade 100644
--- a/datapath/linux/Kbuild.in
+++ b/datapath/linux/Kbuild.in
@@ -13,6 +13,12 @@ ccflags-y += -I$(builddir)/..
 ccflags-y += -g
 ccflags-y += -include $(builddir)/kcompat.h
 
+ifneq (@NETMAP_DIR@,)
+NETMAP_DIR := @NETMAP_DIR@
+EXTRA_CFLAGS += -I$(NETMAP_DIR) -I$(NETMAP_DIR)/LINUX -I$(NETMAP_DIR)/sys -I$(NETMAP_DIR)/sys/dev -DDEV_NETMAP -DWITH_VALE
+KBUILD_EXTRA_SYMBOLS = $(NETMAP_DIR)/Module.symvers
+endif
+
 # These include directories have to go before -I$(KSRC)/include.
 # NOSTDINC_FLAGS just happens to be a variable that goes in the
 # right place, even though it's conceptually incorrect.
diff --git a/datapath/vport-internal_dev.c b/datapath/vport-internal_dev.c
index 482af37fc..1376a0334 100644
--- a/datapath/vport-internal_dev.c
+++ b/datapath/vport-internal_dev.c
@@ -31,10 +31,16 @@
 #include "datapath.h"
 #include "vport-internal_dev.h"
 #include "vport-netdev.h"
+#ifdef DEV_NETMAP
+#include "dp-vale.h"
+#endif
 
 struct internal_dev {
 	struct vport *vport;
 };
+#ifdef DEV_NETMAP
+#include "vport-internal_dev_netmap.h"
+#endif
 
 static struct vport_ops ovs_internal_vport_ops;
 
@@ -103,6 +109,9 @@ static void internal_dev_destructor(struct net_device *dev)
 	struct vport *vport = ovs_internal_dev_get_vport(dev);
 
 	ovs_vport_free(vport);
+#ifdef DEV_NETMAP
+	netmap_detach(dev);
+#endif
 	free_netdev(dev);
 }
 
@@ -229,9 +238,21 @@ static struct vport *internal_dev_create(const struct vport_parms *parms)
 	err = register_netdevice(vport->dev);
 	if (err)
 		goto error_unlock;
+#ifdef DEV_NETMAP
+	/* don't attach (useless) datapath itself */
+	if (parms->port_no != OVSP_LOCAL)
+		vport_internal_netmap_attach(vport->dev);
+#endif
 
 	dev_set_promiscuity(vport->dev, 1);
 	rtnl_unlock();
+#ifdef DEV_NETMAP
+	if (parms->port_no != OVSP_LOCAL) {
+		err = ovs_vale_ctl(parms->name, 1, 1);
+		if (err)
+			goto error_free_netdev;
+	}
+#endif
 	netif_start_queue(vport->dev);
 
 	return vport;
@@ -250,6 +271,11 @@ error:
 static void internal_dev_destroy(struct vport *vport)
 {
 	netif_stop_queue(vport->dev);
+#ifdef DEV_NETMAP
+	if (vport->port_no != OVSP_LOCAL)
+		ovs_vale_ctl(vport->dev->name, 1, 0);
+#endif
+
 	rtnl_lock();
 	dev_set_promiscuity(vport->dev, -1);
 
@@ -264,6 +290,10 @@ static netdev_tx_t internal_dev_recv(struct sk_buff *skb)
 	struct net_device *netdev = skb->dev;
 	struct pcpu_sw_netstats *stats;
 
+#ifdef DEV_NETMAP
+	if (ovs_vale_send(netdev, skb))
+		return NETDEV_TX_OK;
+#endif /* DEV_NETMAP */
 	if (unlikely(!(netdev->flags & IFF_UP))) {
 		kfree_skb(skb);
 		netdev->stats.rx_dropped++;
@@ -297,7 +327,7 @@ static struct vport_ops ovs_internal_vport_ops = {
 
 int ovs_is_internal_dev(const struct net_device *netdev)
 {
-	return netdev->netdev_ops == &internal_dev_netdev_ops;
+	return netdev->netdev_ops->ndo_get_stats64 == internal_get_stats;
 }
 
 struct vport *ovs_internal_dev_get_vport(struct net_device *netdev)
diff --git a/datapath/vport-internal_dev_netmap.h b/datapath/vport-internal_dev_netmap.h
new file mode 100644
index 000000000..2f26d906b
--- /dev/null
+++ b/datapath/vport-internal_dev_netmap.h
@@ -0,0 +1,66 @@
+#include <net/netmap.h>
+#include <netmap/netmap_kern.h>
+
+#define VPORT_INTERNAL_TX_DESC 128
+#define VPORT_INTERNAL_RX_DESC 128
+
+static struct internal_dev *internal_dev_priv(struct net_device *netdev);
+
+static int
+vport_internal_netmap_reg(struct netmap_adapter *na, int onoff)
+{
+	struct net_device *dev = na->ifp;
+	int error = 0;
+
+	if (!(dev)->flags & IFF_UP) {
+		D("Interface is down!");
+		return EINVAL;
+	}
+	if (na == NULL)
+		return EINVAL;
+	if (onoff) {
+		nm_set_native_flags(na);
+		/* XXX do we need to store dev->features ? */
+	} else {
+		nm_clear_native_flags(na);
+	}
+	return error;
+}
+
+static struct rtnl_link_stats64 *
+internal_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats);
+
+static int internal_dev_change_mtu(struct net_device *, int);
+
+static int
+vport_internal_update_config(struct netmap_adapter *na, u_int *txr, u_int *txd, u_int *rxr, u_int *rxd)
+{
+	*txr = na->num_tx_rings;
+	*txd = na->num_tx_desc;
+	*rxr = na->num_rx_rings;
+	*rxd = na->num_rx_desc;
+	return 0;
+}
+
+static struct device_driver dummy = {.owner = THIS_MODULE};
+static void
+vport_internal_netmap_attach(struct net_device *ifp)
+{
+	struct netmap_adapter na;
+
+	bzero(&na, sizeof(na));
+
+	na.ifp = ifp;
+	na.ifp->dev.driver = &dummy;
+	na.num_tx_desc = VPORT_INTERNAL_TX_DESC;
+	na.num_rx_desc = VPORT_INTERNAL_RX_DESC;
+	na.nm_txsync = na.nm_rxsync = NULL;
+	na.nm_register = vport_internal_netmap_reg;
+	na.na_flags |= NAF_SW_ONLY;
+	na.num_tx_rings = na.num_rx_rings = 1;
+	na.nm_config = vport_internal_update_config;
+	netmap_attach(&na);
+	((struct netmap_hw_adapter *)NA(na.ifp))->nm_ndo.ndo_get_stats64 =
+		internal_get_stats;
+	/* do we need these ?*/
+}
diff --git a/datapath/vport-netdev.c b/datapath/vport-netdev.c
index 970f7d3e5..6d0c6e841 100644
--- a/datapath/vport-netdev.c
+++ b/datapath/vport-netdev.c
@@ -36,6 +36,9 @@
 #include "vport.h"
 #include "vport-internal_dev.h"
 #include "vport-netdev.h"
+#ifdef DEV_NETMAP
+#include "dp-vale.h"
+#endif
 
 static struct vport_ops ovs_netdev_vport_ops;
 
@@ -101,6 +104,22 @@ struct vport *ovs_netdev_link(struct vport *vport, const char *name)
 		goto error_free_vport;
 	}
 
+#ifdef DEV_NETMAP
+	/* We only accept interface with native netmap support.
+	 * The emulated (generic) netmap adapter wouldn't work here,
+	 * because registering a generic adapter uses
+	 * netdev_rx_handler_register, which is also needed
+	 * by OVS. */
+	if (!NM_NA_VALID(vport->dev)) {
+		D("%s: netmap generic adapter incompatible with OVS", name);
+		err = -EINVAL;
+		goto error_put;
+	}
+	err = ovs_vale_ctl(name, 0, 1);
+	if (err)
+		goto error_put;
+#endif
+
 	if (vport->dev->flags & IFF_LOOPBACK ||
 	    vport->dev->type != ARPHRD_ETHER ||
 	    ovs_is_internal_dev(vport->dev)) {
@@ -175,6 +194,9 @@ static void netdev_destroy(struct vport *vport)
 	if (vport->dev->priv_flags & IFF_OVS_DATAPATH)
 		ovs_netdev_detach_dev(vport);
 	rtnl_unlock();
+#ifdef DEV_NETMAP
+	ovs_vale_ctl(vport->dev->name, 0, 0);
+#endif
 
 	call_rcu(&vport->rcu, vport_netdev_free);
 }
@@ -209,11 +231,21 @@ struct vport *ovs_netdev_get_vport(struct net_device *dev)
 		return NULL;
 }
 
+static netdev_tx_t
+netdev_send(struct sk_buff *skb)
+{
+#ifdef DEV_NETMAP
+	if (ovs_vale_send(skb->dev, skb))
+		return NETDEV_TX_OK;
+#endif /* DEV_NETMAP */
+	return dev_queue_xmit(skb);
+}
+
 static struct vport_ops ovs_netdev_vport_ops = {
 	.type		= OVS_VPORT_TYPE_NETDEV,
 	.create		= netdev_create,
 	.destroy	= netdev_destroy,
-	.send		= dev_queue_xmit,
+	.send		= netdev_send,
 };
 
 int __init ovs_netdev_init(void)
diff --git a/datapath/vport-vxlan.c b/datapath/vport-vxlan.c
index 11965c004..4599e2b87 100644
--- a/datapath/vport-vxlan.c
+++ b/datapath/vport-vxlan.c
@@ -30,6 +30,10 @@
 #include "vport.h"
 #include "vport-netdev.h"
 
+#ifdef DEV_NETMAP
+#include "dp-vale.h"
+#endif
+
 static struct vport_ops ovs_vxlan_netdev_vport_ops;
 
 static int vxlan_get_options(const struct vport *vport, struct sk_buff *skb)
@@ -155,6 +159,16 @@ static struct vport *vxlan_create(const struct vport_parms *parms)
 	return ovs_netdev_link(vport, parms->name);
 }
 
+static netdev_tx_t
+vxlan_send(struct sk_buff *skb)
+{
+#ifdef DEV_NETMAP
+	if (ovs_vale_send(skb->dev, skb))
+		return NETDEV_TX_OK;
+#endif /* DEV_NETMAP */
+	return vxlan_xmit(skb);
+}
+
 static struct vport_ops ovs_vxlan_netdev_vport_ops = {
 	.type			= OVS_VPORT_TYPE_VXLAN,
 	.create			= vxlan_create,
@@ -163,7 +177,7 @@ static struct vport_ops ovs_vxlan_netdev_vport_ops = {
 #ifndef USE_UPSTREAM_TUNNEL
 	.fill_metadata_dst	= vxlan_fill_metadata_dst,
 #endif
-	.send			= vxlan_xmit,
+	.send			= vxlan_send,
 };
 
 static int __init ovs_vxlan_tnl_init(void)
diff --git a/datapath/vport.c b/datapath/vport.c
index c29f0b0e5..b07c34025 100644
--- a/datapath/vport.c
+++ b/datapath/vport.c
@@ -39,7 +39,10 @@
 #include "datapath.h"
 #include "gso.h"
 #include "vport.h"
+#ifdef DEV_NETMAP
+#include "dp-vale.h"
 #include "vport-internal_dev.h"
+#endif
 
 static LIST_HEAD(vport_ops_list);
 
@@ -244,6 +247,15 @@ struct vport *ovs_vport_add(const struct vport_parms *parms)
 	struct vport_ops *ops;
 	struct vport *vport;
 
+#ifdef DEV_NETMAP
+	/* filter out unsupported vport type */
+	if (parms->type != OVS_VPORT_TYPE_INTERNAL &&
+	    vale_prefix(ovs_dp_name(parms->dp))) {
+	       if (parms->type != OVS_VPORT_TYPE_NETDEV &&
+		   parms->type != OVS_VPORT_TYPE_VXLAN)
+		       return ERR_PTR(-EAFNOSUPPORT) /* XXX */;
+	}
+#endif
 	ops = ovs_vport_lookup(parms);
 	if (ops) {
 		struct hlist_head *bucket;
diff --git a/utilities/ovs-dev.py b/utilities/ovs-dev.py
index 31621f452..8e8e13566 100755
--- a/utilities/ovs-dev.py
+++ b/utilities/ovs-dev.py
@@ -92,6 +92,9 @@ def conf():
         configure.append("--with-dpdk=" + options.with_dpdk)
         cflags += " -Wno-cast-align -Wno-bad-function-cast"  # DPDK warnings.
 
+    if options.with_netmap:
+        configure.append("--with-netmap=" + options.with_netmap)
+
     if options.optimize is None:
         options.optimize = 0
 
@@ -406,6 +409,8 @@ def main():
                      help="configure the man documentation install directory")
     group.add_option("--with-dpdk", dest="with_dpdk", metavar="DPDK_BUILD",
                      help="built with dpdk libraries located at DPDK_BUILD")
+    group.add_option("--with-netmap", dest="with_netmap", metavar="NETMAP_BUILD",
+                     help="built with netmap libraries located at NETMAP_BUILD")
     parser.add_option_group(group)
 
     group = optparse.OptionGroup(parser, "Optimization Flags")
