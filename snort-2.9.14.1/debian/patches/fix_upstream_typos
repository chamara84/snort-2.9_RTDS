Description: Fix typos in upstream code
Author: Javier Fernández-Sanguino Peña <jfs@debian.org>
Origin: vendor
Last-Update: 2014-10-24

--- a/src/dynamic-preprocessors/dns/spp_dns.c
+++ b/src/dynamic-preprocessors/dns/spp_dns.c
@@ -279,7 +279,7 @@
             if (( !cur_tokenp ) || ( strcmp(cur_tokenp, "{" )))
             {
                 DynamicPreprocessorFatalMessage("%s(%d) Bad value specified for %s.  Must start "
-                                                "with '{' and be space seperated.\n",
+                                                "with '{' and be space separated.\n",
                                                 *(_dpd.config_file), *(_dpd.config_line),
                                                 DNS_PORTS_KEYWORD);
                 //free(argcpyp);
--- a/ChangeLog
+++ b/ChangeLog
@@ -12533,7 +12533,7 @@
 
 2006-08-30 Steven Sturges <ssturges@sourcefire.com>
     * src/sfutil/ipobj.c:
-      Additional fix for parsing of IP lists that are not space seperated.
+      Additional fix for parsing of IP lists that are not space separated.
     * src/dynamic-preprocessors/ftptelnet/pp_ftp.c:
       Treat spaces as part of a filename in 'string' parameter validation.
       Thanks Bamm Visscher for pointing out the issue.
@@ -12776,7 +12776,7 @@
       Update to provide links to Snort classification reference information.
       Thanks Yoann Vandoorselaere.
     * src/sfutil/ipobj.c:
-      Fix parsing of IP lists that are not space seperated.
+      Fix parsing of IP lists that are not space separated.
     * src/configure.in:
       Update for HPUX 11.
     * src/snort.c:
@@ -18644,7 +18644,7 @@
            * added bidirectional rules functionality (now Snort goes
              both ways....)
 
-    * log.c: * broke out alerting function into seperate subfunctions
+    * log.c: * broke out alerting function into separate subfunctions
          * ditto logging functions
          * fixed string termination code in the SMB alerter so that it
            can now alert to more than one box at a time
@@ -18848,7 +18848,7 @@
     * rules.c: Moved AlertPkt() and LogPkt() to log.c
 
     * log.c: Totally revamped the logging code to be more logical and
-                 have less duplication in the code.  There are now seperate
+                 have less duplication in the code.  There are now separate
                  logging functions for each of the layers of the packet. 
                  PrintIPPkt() has been totally rewritten, PrintFragHeader has
                  been eliminated, and two functions have been moved over from
@@ -18934,7 +18934,7 @@
                  mode with the "-d" command line switch if you're using Snort
                  as an IDS, because it's still slow enough to drop some large
                  packets.  Packet print out has changed as well, with the
-                 different packet layers seperated by onto their own lines
+                 different packet layers separated by onto their own lines
                  (well, mostly).  Fragmented packets are now recorded in a
                  "FRAG" file.
 
@@ -18965,7 +18965,7 @@
 1999-01-28  mfr  <roesch@clark.net>
 
         * rules.c: Rules sorting is now implemented.  There are actually three
-                   seperate lists (Pass, Log, Alert) now, with the rules being
+                   separate lists (Pass, Log, Alert) now, with the rules being
                    placed on to the lists in the order they're read from the
                    rules file.  The rule execution order was changed, now
                    Alert rules are applied first, then Pass Rules, the Log
--- a/src/output-plugins/spo_alert_syslog.c
+++ b/src/output-plugins/spo_alert_syslog.c
@@ -147,7 +147,7 @@
 /*
  * Function: ParseSyslogArgs(struct _SnortConfig *, char *)
  *
- * Purpose: Process the preprocessor arguements from the rules file and
+ * Purpose: Process the preprocessor arguments from the rules file and
  *          initialize the preprocessor's data struct.  This function doesn't
  *          have to exist if it makes sense to parse the args in the init
  *          function.
--- a/src/output-plugins/spo_alert_unixsock.c
+++ b/src/output-plugins/spo_alert_unixsock.c
@@ -144,7 +144,7 @@
 /*
  * Function: ParseAlertUnixSockArgs(char *)
  *
- * Purpose: Process the preprocessor arguements from the rules file and
+ * Purpose: Process the preprocessor arguments from the rules file and
  *          initialize the preprocessor's data struct.  This function doesn't
  *          have to exist if it makes sense to parse the args in the init
  *          function.
--- a/src/output-plugins/spo_csv.c
+++ b/src/output-plugins/spo_csv.c
@@ -273,8 +273,8 @@
  *
  * Arguments:     p => packet. (could be NULL)
  *              msg => the message to send
- *             args => CSV output arguements
- *          numargs => number of arguements
+ *             args => CSV output arguments
+ *          numargs => number of arguments
  *             log => Log
  * Returns: void function
  *
--- a/src/output-plugins/spo_unified2.c
+++ b/src/output-plugins/spo_unified2.c
@@ -1241,7 +1241,7 @@
 /*
  * Function: Unified2ParseArgs(char *)
  *
- * Purpose: Process the preprocessor arguements from the rules file and
+ * Purpose: Process the preprocessor arguments from the rules file and
  *          initialize the preprocessor's data struct.  This function doesn't
  *          have to exist if it makes sense to parse the args in the init
  *          function.
--- a/src/parser.c
+++ b/src/parser.c
@@ -4516,7 +4516,7 @@
 
     if(filespec == NULL)
     {
-        ParseError("no arguement in this file option, remove extra ':' at the end of the alert option\n");
+        ParseError("no argument in this file option, remove extra ':' at the end of the alert option\n");
     }
 
     /* look for ".." in the string and complain and exit if it is found */
--- a/src/preprocessors/spp_perfmonitor.c
+++ b/src/preprocessors/spp_perfmonitor.c
@@ -189,7 +189,7 @@
 /*
  * Function: ParsePerfMonitorArgs(struct _SnortConfig *, char *)
  *
- * Purpose: Process the preprocessor arguements from the rules file and
+ * Purpose: Process the preprocessor arguments from the rules file and
  *          initialize the preprocessor's data struct.  This function doesn't
  *          have to exist if it makes sense to parse the args in the init
  *          function.
--- a/src/sfutil/sfportobject.c
+++ b/src/sfutil/sfportobject.c
@@ -3674,7 +3674,7 @@
     {
     case POPERR_NO_NAME:            return "no name";
     case POPERR_NO_ENDLIST_BRACKET: return "no end of list bracket."
-                                           " Elements must be comma seperated,"
+                                           " Elements must be comma separated,"
                                            " and no spaces may appear between"
                                            " brackets.";
     case POPERR_NOT_A_NUMBER:       return "not a number";
@@ -3853,7 +3853,7 @@
         //LogMessage("PortObject : '%s' \n",portlist);
 
         /*
-        This is seperate fom PortVar's since some rules may declare these inline
+        This is separate form PortVar's since some rules may declare these inline
         */
         po = PortObjectParseString ( pvTable, &pop, argv[i], PORTLISTS, names/* bool 0/1 - name required in parse */);
         if( !po )
--- a/templates/spp_template.c
+++ b/templates/spp_template.c
@@ -13,7 +13,7 @@
  *
  * Arguments:
  *   
- * This is the list of arguements that the plugin can take at the 
+ * This is the list of arguments that the plugin can take at the
  * "preprocessor" line in the rules file
  *
  * Effect:
@@ -138,7 +138,7 @@
 /*
  * Function: ParseTemplateArgs(char *)
  *
- * Purpose: Process the preprocessor arguements from the rules file and 
+ * Purpose: Process the preprocessor arguments from the rules file and
  *          initialize the preprocessor's data struct.  This function doesn't
  *          have to exist if it makes sense to parse the args in the init 
  *          function.
